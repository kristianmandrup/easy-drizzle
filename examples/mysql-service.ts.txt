import { desc, eq, gt, gte, inArray, lt, lte } from 'drizzle-orm';
import type {
  MySqlInsertValue,
  MySqlUpdateSetSource,
} from 'drizzle-orm/mysql-core';

import { envConfig } from 'easy-drizzle/env';
import type { OrderOpts, PaginationOpts } from 'easy-drizzle/types';

import type { MysqlClient } from 'easy-drizzle/mysql';

import type { MysqlTable } from './mysql-schema';

export class MysqlService<TTable extends MysqlTable> {
  public dbClient: MysqlClient;
  public table: TTable;

  constructor({ dbClient, table }: { dbClient: MysqlClient; table: TTable }) {
    this.dbClient = dbClient;
    this.table = table;
  }

  private all() {
    return this.dbClient.select().from(this.table);
  }

  async getAll() {
    const records = await this.all();
    return records;
  }

  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  async getOrdered(columns: any, opts: OrderOpts = {}) {
    const ordered =
      opts.order !== 'desc'
        ? this.all().orderBy(columns)
        : this.all().orderBy(desc(columns));
    if (opts.limit) ordered.limit(opts.limit);
    const records = await ordered;
    return records;
  }

  async getPage(opts: PaginationOpts) {
    const all = this.dbClient.select().from(this.table);
    if (opts.limit) {
      all.limit(opts.limit);
    }
    if (opts.offset) {
      all.offset(opts.offset);
    }
    const records = await all;
    return records;
  }

  async getById({ id }: { id: number }) {
    const records = await this.all().where(eq(this.table.id, id));
    return records;
  }

  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  async whereMatching(column: any, match: any) {
    const records = await this.all().where(eq(column, match));
    return records;
  }

  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  async whereGreater(column: any, criteria: number) {
    const records = await this.all().where(gt(column, criteria));
    return records;
  }

  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  async whereLess(column: any, criteria: number) {
    const records = await this.all().where(lt(column, criteria));
    return records;
  }

  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  async whereLte(column: any, criteria: number) {
    const records = await this.all().where(lte(column, criteria));
    return records;
  }

  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  async whereGte(column: any, criteria: number) {
    const records = await this.all().where(gte(column, criteria));
    return records;
  }

  async insert({ values }: { values: MySqlInsertValue<TTable> }) {
    const records = await this.dbClient.insert(this.table).values(values);
    return records;
  }

  async insertMany({ values }: { values: MySqlInsertValue<TTable>[] }) {
    const records = await this.dbClient.insert(this.table).values(values);
    return records;
  }

  async updateById({
    id,
    values,
  }: {
    id: number;
    values: MySqlUpdateSetSource<TTable>;
  }) {
    const records = await this.dbClient
      .update(this.table)
      .set(values)
      .where(eq(this.table.id, id));
    return records;
  }

  async deleteById({ id }: { id: number }) {
    const records = await this.dbClient
      .delete(this.table)
      .where(eq(this.table.id, id));
    return records;
  }

  async deleteMany({ ids }: { ids: number[] }) {
    const records = await this.dbClient
      .delete(this.table)
      .where(inArray(this.table.id, ids));
    return records;
  }

  async deleteAll() {
    if (envConfig.STAGE !== 'test' || envConfig.MYSQL_DB_HOST !== 'localhost') {
      throw new Error('Delete all records is only allowed in test environment');
    }

    await this.dbClient.delete(this.table);
  }
}
